import json
import base64
from PIL import Image
import io

image_string = '{"snapshot":""}'
data = json.loads(image_string)

image_data = base64.b64decode(data["snapshot"])
image = Image.open(io.BytesIO(image_data))
image.save("image.png", "PNG", quality=100)
